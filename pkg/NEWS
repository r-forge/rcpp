
0.7.4	(under development)
    o	matrix matrix-like indexing using operator() for all vector 
    	types : IntegerVector, NumericVector, RawVector, CharacterVector
    	LogicalVector, GenericVector and ExpressionVector. 

    o	an intermediate template class SimpleVector has been added. All
    	simple vector classes are now generated from the SimpleVector 
    	template : IntegerVector, NumericVector, RawVector, CharacterVector
    	LogicalVector.

    o	an intermediate template class SEXP_Vector has been added to 
    	generate GenericVector and ExpressionVector. 

    o	the clone template function was introduced to explicitely
    	clone an RObject vy duplicating the SEXP it encapsulates.

    o 	the as template is now smarter. The template now attempts to 
    	build an object of the requested template parameter T by using the
    	constructor for the type taking a SEXP. This allows third party code
    	to create a class Foo with a constructor Foo(SEXP) to have 
    	as<Foo> for free.

    o	wrap becomes a template. For an object of type T, wrap<T> uses
    	implicit conversion to SEXP to first convert the object to a SEXP
    	and then uses the wrap(SEXP) function. This allows third party 
    	code creating a class Bar with an operator SEXP() to have 
    	wrap for free.

    o	all specializations of wrap :  wrap<double>, wrap< vector<double> >
    	use coercion to deal with missing values (NA) appropriately.

    o	configure has been withdrawn. C++0x features can now be activated
    	by setting the RCPP_CXX0X environment variable to "yes".

    o	new template r_cast<int> to facilitate conversion of one SEXP
    	type to another. This is mostly intended for internal use and 
    	is used on all vector classes

    o	Environment now takes advantage of the augmented smartness
    	of as and wrap templates. If as<Foo> makes sense, one can 
    	directly extract a Foo from the environment. If wrap<Bar> makes
    	sense then one can insert a Bar directly into the environment. 
    	Foo foo = env["x"] ;  /* as<Foo> is used */
	Bar bar ;
	env["y"] = bar ;      /* wrap<Foo> is used */    	

    o	Environment::assign becomes a template and also uses wrap to 
    	create a suitable SEXP

    o	Many more unit tests, now totalling 136 test functions

0.7.3	2010-01-21

    o	New R function Rcpp.package.skeleton, modelled after 
    	utils::package.skeleton to help creating a package with support
    	for Rcpp use.

    o	indexing is now faster for simple vectors due to inlining of 
    	the operator[] and caching the array pointer

    o	The class Rcpp::VectorBase was introduced. All vector classes
    	derive from it. The class handles behaviour that is common 
    	to all vector types: length, names, etc ...

    o	exception forwarding is extended to compilers other than GCC
    	but default values are used for the exception class 
    	and the exception message, because we don't know how to do it.

    o	Improved detection of C++0x capabilities

    o	Rcpp::Pairlist gains a default constructor

    o	Rcpp::Environment gains a new_child method to create a new
    	environment whose parent is this
    
    o	Rcpp::Environment::Binding gains a templated implicit 
    	conversion operator
    	
    o	Rcpp::ExpressionVector gains an eval method to evaluate itself
    
    o	Rcpp::ExpressionVector gains a constructor taking a std::string
    	representing some R code to parse. 
    
    o	Rcpp::GenericVector::Proxy gains an assignment operator to deal
    	with Environment::Proxy objects


    	
