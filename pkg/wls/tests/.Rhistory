coef
coef
n
wt
n
ff = tryCatch(irxly$fit(wt), error = function(e)e)
ff
names(ff)
ff$message
stopifnot
args(grepl)
msg$message
msg$message
n
msg
mIrwls
str(mIrwls)
objects(mIrwls, all=TRUE)
mIrwls$refClassGenerators
get("refClassGenerators", mIrwls)
prompt(mIrwls)
options(error=recover)
prompt(mIrwls)
2
selectMethod("prompt", class(mIrwls))
objects()
object$pointer
class(object)
getSlots(class(object))
as.environment(object)$pointer
typeof(object)
selectMethod("$",class(object))
object$pointer
Q
mIrwls$pointer
1
object()
x
as.environment(x)
pointer
Q
prompt(mIrwls)
2
objects()
lines
Q
setMethod( "prompt", "Module", function(object, filename = NULL, name = NULL, ...){
	lines <- readLines( system.file( "prompt", "module.Rd", package = "Rcpp" ) )
	if( is.null(name) ) name <- .Call( Module__name, .getModulePointer(object) )
	if( is.null(filename) ) filename <- sprintf( "%s-module.Rd", name )
	lines <- gsub( "NAME", name, lines )
	
	info <- functions( object )
	f.txt <- if( length( info ) ){
		sprintf( "functions: \\\\describe{
%s
		}", paste( sprintf( "        \\\\item{%s}{ ~~ description of function %s ~~ }", names(info), names(info) ), collapse = "\n" ) )
	} else {
		"" 
	}
	lines <- sub( "FUNCTIONS", f.txt, lines )

        ## at this point functions() would have failed if the
        ## pointer in object was not valid
        pointer <- .getModulePointer(object)
	
	classes <- .Call( Module__classes_info, pointer )
	c.txt <- if( length( classes ) ){
		sprintf( "classes: \\\\describe{
%s
		}", paste( sprintf( "        \\\\item{%s}{ ~~ description of class %s ~~ }", names(classes), names(classes) ), collapse = "\n" ) )
	} else {
		"" 
	}
	lines <- sub( "CLASSES", c.txt, lines )
	
	writeLines( lines, filename )
	invisible(NULL)
} )

prompt(mIrwls)
0
n
require(Irwls)
prompt(mIrwls)
prompt(mIrwls, filename = "/tmp/foo.Rd")
trace("show", sig = "Module", browser)
mIrwls
n
Module__functions_arity
Module__name
find("Module__name")
info
objects()
wheree
where
environment(sys.function(2))
objects(environment(sys.function(2)))
Q
n
irwls
trace(methods:::refClassInformation, browser)
setRefClass("myW", contains = irwls)
n
superClasses
isRefSuperClass
otherRefClasses
c
options(error=recover)
setRefClass("myW", contains = irwls)
c
11
objects()
pointer
module
Q
n
methods:::refClassInformation
insertSource(source="/Users/jmc/R_Devel/source_devel/src/library/methods/R/refClass.R", package = "methods")
options(error=recover)
2
2
objects()
class(x)
.Method
objects(x)
Q
0
n
require(Irwls)
mIrwls
objects(mIrwls)
mIrwls$moduleName
options(error=recover)
mIrwls$moduleName
0
get("moduleName", envir = mIrwls)
mm = Module("mIrwls"), asNamespace("Irwls"))
mm = Module("mIrwls")
mm
objects(as.environment(mm))
trace(Module, browser)
mm = Module("mIrwls")
n
mustStart
xp
xp
.badModulePointer
Q
args(Module)
mm = Module("mIrwls", mustStart = TRUE)
n
xp
symbol
Q
mm = Module("mIrwls", mustStart = TRUE, package = "Irwls")
0
args(Module)
mm = Module("mIrwls", mustStart = TRUE, PACKAGE = "Irwls")
n
symbol
c
3
objects()
Q
n
require(Irwls)
mIrwls
objects(mIrwls)
mIrwls <- Module("mIrwls", PACKAGE="Irwls")
objects(mIrwls)
mIrwls <- Module("mIrwls", PACKAGE="Irwls", mustStart = TRUE)
objects(mIrwls)
get("refClassGenerators", mIrwls)
objects(asNamespace("Irwls"), all=TRUE)
Rcpp:::.getModulePointer
mIrwls$cppIrwls
n
require(Irwls)
trace(Rcpp:::.getModulePointer, browser)
 mIrwls$cppIrwls
n
pointer
trace(Module, browser)
n
where
xp
symbol
xp
classes
where
pointer
n
require(Irwls)
mIrwls$cppIrwls
setRefClass("myw", contains = mIrwls$cppIrwls)
extends("myw")
isRefClass("Rcpp_cppIrwls")
isReferenceClass("Rcpp_cppIrwls")
is(getClass("Rcpp_cppIrwls"), "refClassRepresentation")
trace(methods:::refClassInformation, browser)
setRefClass("myw", contains = mIrwls$cppIrwls)
n
superClasses
n
cc = list(a=1, b=2)
cc[["d"]] = 3
dput(cc)
Q
n
require(Irwls)
myw <- setRefClass("myw", contains = mIrwls$cppIrwls)
mi <- myw$new(xx, y)
mi
coef <- mi$fit(rep(1,0))
coef <- mi$fit(rep(1,10))
coef
getClasses(1)
as.character(mIrwls$cppIrwls)
getClass(mIrwls$cppIrwls)
n
require(Irwls)
getClasses(1)
getClasses(2)
search()
trace(assignClassDef, browser)
mIrwls$cppIrwls
where
Q
setClass("mm", contains = "environment", representation(flag = "character")
)
untrace(assignClassDef)
vv = new("mm
vv = new("mm")
vv$a = 1
vv
vv[["a"]] = 1
vv
showMethods("[[<-")
showMethods("$<-")
selectMethod("$<-", "envRefClass")
getGeneric("[[<-")
t1
t1
tl
tl$x
tl
showMethods("$")
selectMethods("$", "ANY")
selectMethod("$", "ANY")
getClass("myEnv")
showMethods("[[<-")
n
m$y <- 2
m
showMethods("$<-")
selectMethod("$<-", "myEnv")
n
m
as.list(tl)
unclass(tl)
tl$z
tl
tl <- new("mylist")
tl[["z"]] <- 1
tl
tl$z
tl@.Data
unclass(tl)
tl
tl[["z"]] <- 1
tl
names(tl)
tl[["z"]]
tl = new("mylist"); tl$z <- 1
tl
tl = new("mylist"); tl[["z"]] <-1
tl
print(tl)
names(tl)
getClass("mylist")
tl
tl$z
tl
tl$z
n
